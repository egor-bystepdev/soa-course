// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	Source string `json:"source"`
	Text   string `json:"text"`
	Date   string `json:"date"`
}

type CommentData struct {
	Source string `json:"source"`
	Text   string `json:"text"`
}

type Game struct {
	ID       string     `json:"id"`
	State    GameState  `json:"state"`
	Date     string     `json:"date"`
	Players  []*Player  `json:"players"`
	Comments []*Comment `json:"comments"`
}

type GameInfo struct {
	ID    string    `json:"id"`
	State GameState `json:"state"`
}

type Player struct {
	Username string `json:"username"`
	Role     string `json:"role"`
	Alive    bool   `json:"alive"`
}

type PlayerData struct {
	Username string `json:"username"`
	Role     string `json:"role"`
}

type PlayerStatus struct {
	Username string `json:"username"`
	Alive    bool   `json:"alive"`
}

type GameState string

const (
	GameStateInProgress GameState = "IN_PROGRESS"
	GameStateEnd        GameState = "END"
)

var AllGameState = []GameState{
	GameStateInProgress,
	GameStateEnd,
}

func (e GameState) IsValid() bool {
	switch e {
	case GameStateInProgress, GameStateEnd:
		return true
	}
	return false
}

func (e GameState) String() string {
	return string(e)
}

func (e *GameState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GameState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GameState", str)
	}
	return nil
}

func (e GameState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
