// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package sessions_stat_client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// CreateGameResponse is returned by CreateGame on success.
type CreateGameResponse struct {
	CreateGame bool `json:"CreateGame"`
}

// GetCreateGame returns CreateGameResponse.CreateGame, and is useful for accessing the field via an interface.
func (v *CreateGameResponse) GetCreateGame() bool { return v.CreateGame }

type GameInfo struct {
	Id    string    `json:"id"`
	State GameState `json:"state"`
}

// GetId returns GameInfo.Id, and is useful for accessing the field via an interface.
func (v *GameInfo) GetId() string { return v.Id }

// GetState returns GameInfo.State, and is useful for accessing the field via an interface.
func (v *GameInfo) GetState() GameState { return v.State }

type GameState string

const (
	GameStateInProgress GameState = "IN_PROGRESS"
	GameStateEnd        GameState = "END"
)

type PlayerData struct {
	Username string `json:"username"`
	Role     string `json:"role"`
}

// GetUsername returns PlayerData.Username, and is useful for accessing the field via an interface.
func (v *PlayerData) GetUsername() string { return v.Username }

// GetRole returns PlayerData.Role, and is useful for accessing the field via an interface.
func (v *PlayerData) GetRole() string { return v.Role }

type PlayerStatus struct {
	Username string `json:"username"`
	Alive    bool   `json:"alive"`
}

// GetUsername returns PlayerStatus.Username, and is useful for accessing the field via an interface.
func (v *PlayerStatus) GetUsername() string { return v.Username }

// GetAlive returns PlayerStatus.Alive, and is useful for accessing the field via an interface.
func (v *PlayerStatus) GetAlive() bool { return v.Alive }

// UpdateGameResponse is returned by UpdateGame on success.
type UpdateGameResponse struct {
	UpdateGame bool `json:"UpdateGame"`
}

// GetUpdateGame returns UpdateGameResponse.UpdateGame, and is useful for accessing the field via an interface.
func (v *UpdateGameResponse) GetUpdateGame() bool { return v.UpdateGame }

// __CreateGameInput is used internally by genqlient
type __CreateGameInput struct {
	Game_info GameInfo     `json:"game_info"`
	Players   []PlayerData `json:"players"`
}

// GetGame_info returns __CreateGameInput.Game_info, and is useful for accessing the field via an interface.
func (v *__CreateGameInput) GetGame_info() GameInfo { return v.Game_info }

// GetPlayers returns __CreateGameInput.Players, and is useful for accessing the field via an interface.
func (v *__CreateGameInput) GetPlayers() []PlayerData { return v.Players }

// __UpdateGameInput is used internally by genqlient
type __UpdateGameInput struct {
	Game_id         string         `json:"game_id"`
	New_state       GameState      `json:"new_state"`
	Player_statuses []PlayerStatus `json:"player_statuses"`
}

// GetGame_id returns __UpdateGameInput.Game_id, and is useful for accessing the field via an interface.
func (v *__UpdateGameInput) GetGame_id() string { return v.Game_id }

// GetNew_state returns __UpdateGameInput.New_state, and is useful for accessing the field via an interface.
func (v *__UpdateGameInput) GetNew_state() GameState { return v.New_state }

// GetPlayer_statuses returns __UpdateGameInput.Player_statuses, and is useful for accessing the field via an interface.
func (v *__UpdateGameInput) GetPlayer_statuses() []PlayerStatus { return v.Player_statuses }

// The query or mutation executed by CreateGame.
const CreateGame_Operation = `
mutation CreateGame ($game_info: GameInfo!, $players: [PlayerData!]!) {
	CreateGame(game_info: $game_info, players: $players)
}
`

func CreateGame(
	ctx context.Context,
	client graphql.Client,
	game_info GameInfo,
	players []PlayerData,
) (*CreateGameResponse, error) {
	req := &graphql.Request{
		OpName: "CreateGame",
		Query:  CreateGame_Operation,
		Variables: &__CreateGameInput{
			Game_info: game_info,
			Players:   players,
		},
	}
	var err error

	var data CreateGameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by UpdateGame.
const UpdateGame_Operation = `
mutation UpdateGame ($game_id: ID!, $new_state: GameState!, $player_statuses: [PlayerStatus!]!) {
	UpdateGame(game_id: $game_id, new_state: $new_state, player_statuses: $player_statuses)
}
`

func UpdateGame(
	ctx context.Context,
	client graphql.Client,
	game_id string,
	new_state GameState,
	player_statuses []PlayerStatus,
) (*UpdateGameResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateGame",
		Query:  UpdateGame_Operation,
		Variables: &__UpdateGameInput{
			Game_id:         game_id,
			New_state:       new_state,
			Player_statuses: player_statuses,
		},
	}
	var err error

	var data UpdateGameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
