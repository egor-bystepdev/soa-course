// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: mafia/welcome.proto

package welcome

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Welcome_Connect_FullMethodName = "/welcome.Welcome/Connect"
)

// WelcomeClient is the client API for Welcome service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WelcomeClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Welcome_ConnectClient, error)
}

type welcomeClient struct {
	cc grpc.ClientConnInterface
}

func NewWelcomeClient(cc grpc.ClientConnInterface) WelcomeClient {
	return &welcomeClient{cc}
}

func (c *welcomeClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Welcome_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Welcome_ServiceDesc.Streams[0], Welcome_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &welcomeConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Welcome_ConnectClient interface {
	Recv() (*WelcomeResponse, error)
	grpc.ClientStream
}

type welcomeConnectClient struct {
	grpc.ClientStream
}

func (x *welcomeConnectClient) Recv() (*WelcomeResponse, error) {
	m := new(WelcomeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WelcomeServer is the server API for Welcome service.
// All implementations must embed UnimplementedWelcomeServer
// for forward compatibility
type WelcomeServer interface {
	Connect(*ConnectRequest, Welcome_ConnectServer) error
	mustEmbedUnimplementedWelcomeServer()
}

// UnimplementedWelcomeServer must be embedded to have forward compatible implementations.
type UnimplementedWelcomeServer struct {
}

func (UnimplementedWelcomeServer) Connect(*ConnectRequest, Welcome_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedWelcomeServer) mustEmbedUnimplementedWelcomeServer() {}

// UnsafeWelcomeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WelcomeServer will
// result in compilation errors.
type UnsafeWelcomeServer interface {
	mustEmbedUnimplementedWelcomeServer()
}

func RegisterWelcomeServer(s grpc.ServiceRegistrar, srv WelcomeServer) {
	s.RegisterService(&Welcome_ServiceDesc, srv)
}

func _Welcome_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WelcomeServer).Connect(m, &welcomeConnectServer{stream})
}

type Welcome_ConnectServer interface {
	Send(*WelcomeResponse) error
	grpc.ServerStream
}

type welcomeConnectServer struct {
	grpc.ServerStream
}

func (x *welcomeConnectServer) Send(m *WelcomeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Welcome_ServiceDesc is the grpc.ServiceDesc for Welcome service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Welcome_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "welcome.Welcome",
	HandlerType: (*WelcomeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Welcome_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mafia/welcome.proto",
}
